AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation Backend Tutorial

Parameters:
  hostingBucketName:
    Type: String

  artifactsBucketName:
    Type: String

  userPoolName:
    Type: String

  snsRoleName:
    Type: String

  snsPolicyName:
    Type: String

  passwordPolicyMinLength:
    Type: String

  emailVerificationSubject:
    Type: String

  emailVerificationMessage:
    Type: String

  smsAuthenticationMessage:
    Type: String

  smsVerificationMessage:
    Type: String

  autoVerifiedAttributes:
    Type: CommaDelimitedList

  usernameAttributes:
    Type: CommaDelimitedList

  mfaConfiguration:
    Type: String

  userpoolClientGenerateSecret:
    Type: String

  userpoolClientRefreshTokenValidity:
    Type: String

  apiGatewayDeployment:
    Type: String

Resources:
  # S3 BUCKETS - Hosting Bucket && Artifacts Bucket
  TodoHostingBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      BucketName: !Ref hostingBucketName
      MetricsConfigurations:
        - Id: EntireBucket
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  TodoArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref artifactsBucketName

  # COGNTIO
  SNSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref snsRoleName
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: ""
            Effect: "Allow"
            Principal:
              Service: "cognito-idp.amazonaws.com"
            Action:
              - "sts:AssumeRole"

      Policies:
        - PolicyName: !Ref snsPolicyName
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "sns:Publish"
                Resource: "*"

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Ref userPoolName
      UsernameConfiguration:
        CaseSensitive: false
      Schema:
        - Name: email
          Required: true
          Mutable: true
      AutoVerifiedAttributes: !Ref autoVerifiedAttributes
      EmailVerificationMessage: !Ref emailVerificationMessage
      EmailVerificationSubject: !Ref emailVerificationSubject
      Policies:
        PasswordPolicy:
          MinimumLength: !Ref passwordPolicyMinLength
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes: !Ref usernameAttributes
      MfaConfiguration: !Ref mfaConfiguration
      SmsVerificationMessage: !Ref smsVerificationMessage
      SmsAuthenticationMessage: !Ref smsAuthenticationMessage
      SmsConfiguration:
        SnsCallerArn: !GetAtt SNSRole.Arn

  UserPoolClientWeb:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Join ["", [!Ref userPoolName, "-", "clientweb"]]
      RefreshTokenValidity: !Ref userpoolClientRefreshTokenValidity
      UserPoolId: !Ref UserPool
    DependsOn: UserPool

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Join ["", [!Ref userPoolName, "-", "client"]]
      GenerateSecret: !Ref userpoolClientGenerateSecret
      RefreshTokenValidity: !Ref userpoolClientRefreshTokenValidity
      UserPoolId: !Ref UserPool
    DependsOn: UserPool

  # DYNAMODB
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "email"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "email"
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  TasksTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "email"
          AttributeType: "S"
        - AttributeName: "id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "email"
          KeyType: HASH
        - AttributeName: "id"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # API GATEWAY
  TodoApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: Todo_Api
      EndpointConfiguration:
        Types:
          - REGIONAL

  UserslambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UsersLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub
        - arn:aws:execute-api:${region}:${account}:${todoApi}/*
        - {
            region: !Ref "AWS::Region",
            account: !Ref "AWS::AccountId",
            todoApi: !Ref TodoApiGateway,
          }
    DependsOn:
      - UsersLambda

  TaskslambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt TasksLambda.Arn
      Action: "lambda:InvokeFunction"
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub
        - arn:aws:execute-api:${region}:${account}:${todoApi}/*
        - {
            region: !Ref "AWS::Region",
            account: !Ref "AWS::AccountId",
            todoApi: !Ref TodoApiGateway,
          }
    DependsOn:
      - TasksLambda

  UsersResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TodoApiGateway
      ParentId: !GetAtt
        - TodoApiGateway
        - RootResourceId
      PathPart: users
    DependsOn:
      - TodoApiGateway

  TasksResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TodoApiGateway
      ParentId: !GetAtt
        - TodoApiGateway
        - RootResourceId
      PathPart: tasks
    DependsOn:
      - TodoApiGateway

  UsersOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref TodoApiGateway
      ResourceId: !Ref UsersResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
    DependsOn:
      - UsersResource

  TasksOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId: !Ref TodoApiGateway
      ResourceId: !Ref TasksResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false
    DependsOn:
      - TasksResource

  UsersGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApiGateway
      ResourceId: !Ref UsersResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersLambda.Arn}/invocations
    DependsOn:
      - UsersResource

  UsersPostMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApiGateway
      ResourceId: !Ref UsersResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersLambda.Arn}/invocations
    DependsOn:
      - UsersResource

  UsersDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApiGateway
      ResourceId: !Ref UsersResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UsersLambda.Arn}/invocations
    DependsOn:
      - UsersResource

  TasksGetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApiGateway
      ResourceId: !Ref TasksResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TasksLambda.Arn}/invocations
    DependsOn:
      - TasksResource

  TasksPostsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApiGateway
      ResourceId: !Ref TasksResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TasksLambda.Arn}/invocations
    DependsOn:
      - TasksResource

  TasksDeleteMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TodoApiGateway
      ResourceId: !Ref TasksResource
      HttpMethod: DELETE
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TasksLambda.Arn}/invocations
    DependsOn:
      - TasksResource

  ApiGatewayDeployment:
    DependsOn:
      - UsersGetMethod
      - UsersPostMethod
      - UsersDeleteMethod
      - TasksGetMethod
      - TasksPostsMethod
      - TasksDeleteMethod
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref TodoApiGateway
      StageName: !Ref apiGatewayDeployment

  # LAMBDA
  UsersLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: users_lambda_role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"

  UsersLambdaLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: users_lambda_log_policy
      Roles:
        - !Ref UsersLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !Sub
              - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
              - {
                  region: !Ref "AWS::Region",
                  account: !Ref "AWS::AccountId",
                  lambda: !Ref UsersLambda,
                }
    DependsOn: UsersLambdaRole

  UsersTablePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: users_table_policy
      Roles:
        - !Ref UsersLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGetItem"
              - "dynamodb:GetItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
            Resource: !GetAtt UsersTable.Arn
    DependsOn: UsersLambdaRole

  UsersLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: todoappartifacts
        S3Key: todo-users-zip
      Handler: ./todo-users/index.handler
      Runtime: nodejs14.x
      Timeout: "300"
      Environment:
        Variables:
          USERS_TABLE_NAME: !Ref UsersTable
      Role: !GetAtt
        - UsersLambdaRole
        - Arn
    DependsOn: UsersLambdaRole

  TasksLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: tasks_lambda_role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"

  TasksLambdaLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: tasks_lambda_log_policy
      Roles:
        - !Ref TasksLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
            Resource: !Sub
              - arn:aws:logs:${region}:${account}:log-group:/aws/lambda/${lambda}:log-stream:*
              - {
                  region: !Ref "AWS::Region",
                  account: !Ref "AWS::AccountId",
                  lambda: !Ref TasksLambda,
                }
    DependsOn: TasksLambdaRole

  TasksTablePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: tasks_table_policy
      Roles:
        - !Ref TasksLambdaRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - "dynamodb:BatchGetItem"
              - "dynamodb:GetItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
              - "dynamodb:BatchWriteItem"
              - "dynamodb:PutItem"
              - "dynamodb:UpdateItem"
            Resource: !GetAtt TasksTable.Arn
    DependsOn: TasksLambdaRole

  TasksLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: todoappartifacts
        S3Key: todo-tasks-zip
      Handler: ./todo-tasks/index.handler
      Runtime: nodejs14.x
      Timeout: "300"
      Environment:
        Variables:
          TASKS_TABLE_NAME: !Ref TasksTable
      Role: !GetAtt
        - TasksLambdaRole
        - Arn
    DependsOn: TasksLambdaRole

Outputs:
  WebsiteURL:
    Value: !GetAtt
      - TodoHostingBucket
      - WebsiteURL
    Description: URL for website hosted on S3

  S3BucketSecureURL:
    Value: !Join
      - ""
      - - "https://"
        - !GetAtt
          - TodoHostingBucket
          - DomainName
    Description: Name of S3 bucket to hold website content

  UserPoolId:
    Value: !Ref "UserPool"
    Description: Id for the user pool

  UserPoolName:
    Value: !Ref userPoolName

  AppClientIDWeb:
    Value: !Ref "UserPoolClientWeb"
    Description: The user pool app client id for web

  AppClientID:
    Value: !Ref "UserPoolClient"
    Description: The user pool app client id
